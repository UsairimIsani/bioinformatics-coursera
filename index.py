def PatternCount(text, pattern):
    count = 0
    len_f_text = len(text)
    len_f_pattern = len(pattern)
    ran = len_f_text-len_f_pattern
    for p in range(0, ran+1):
        st_sl = text[p:p+len_f_pattern]
        if(st_sl == pattern):
            count = count+1
    return count


def FrequentWords(text, k):
    kmers = set()
    for i in range(0, len(text)-k+1):
        kmers.add(text[i:i+k])
    freq = set()
    for i in kmers:
        freq.add((i, PatternCount(text, i)))
    maxmers = {}
    max_sq = max(freq, key=lambda a: a[1])
    for i in freq:
        if i[1] == max_sq[1]:
            maxmers[i[0]] = i[1]
    return maxmers


def ReverseComplement(Pattern):
    rev_pat = ""
    for i in Pattern:
        if i == "A":
            rev_pat += "T"
        elif i == "G":
            rev_pat += "C"
        elif i == "C":
            rev_pat += "G"
        elif i == "T":
            rev_pat += "A"
    rev_pat = list(rev_pat)
    rev_pat.reverse()
    rev_pat = "".join(rev_pat)
    with open("answer.txt","w+") as f:
        f.write(rev_pat)
    return rev_pat


# print(ReverseComplement("TAGCTAAATAACTTCAATCGTCTGGTGACCAAAATAGCTAAGATTGCAGATTCTTGCACTTTCAATCCTTGGTGCCCAGATTCGGGTTACGACCCCCAGCCGAACAGGTATTCCTCCCCCCAGCACCGGAATTAGCCATGCCTTGTCCGATGCACCCGCATACACACCCGCAGTGCTACGTTGCGATAGTTCTAGCAGTTGCAGTGTATCGTCTGACATCCCCGAACATTGGGCACGTGGGTAGTCGTCATCGTTAACCCTACTGCCACGTTTACCCATTTAGGTAGCGCATCTTCGATGCGACAGCTCCCTACATATCCACCCCGAATCAACTTCTGTTCGTTGATACACTGGCAAAGGAGTCGTGCGCGTAGGTTCTACCGTTTAGCGGCCCAATAGACGGCAACTCGGCATGAATAACATAGCTAAGTTGTACGAACGGGGATACTCTGGTATGCGAGGAGATTTACCTCCCTTGGAAAGGTCACGCTGCGATGCTTTTACTGGTTGCTTATAGAAGATTCTTACGCGCGCTACGTGGTCCCCTCATTAATAGAGAAGGGCGATGTGAACCGTCAGATTGTGGGATCACAGGTGCCATGGTCAAGTGTCGACAGTATACCGAGCACACTATTGTCCGATGCTAGTGTGGTGTACGCATTCTTAGGGTTGCTGCCCAGAACCTTCAAGGTACTCTTAATTGCCAAAAATCATCTGGAAGTGGTAAGAATACCGATACGGGCCTTGCACCTAAGAGTCGTAAGTGGGAACTGGGGGAACCCTTCATCCTCTGAGGGGTGGGGCGGGTAGAAACGCAACATGCCCACCTGGTAGTGTAGTCCGAGTTCGGGTGCTGGCTTTCAATTGCCTTCCCAGCGGAGGGCAGTGCAATATGGCGGTACCACACCCCATTACCCATCGTGCTATACAACGCCACGCCACAAAATCGCCGCTCCGTGCAATTTTCTTATCCAATCCCCAAGTCCTAGCTACATGTGACGCCGACTTATATCCGACCGATCATGTCCTCTGGGTAACCCGCGCCAGGTGTTCACTCTACTCCTGGCAATTAGTCTCTCATAACAGAATCTCAGACAGATCGGGCTAGGTATTTGGAACTCCCTCACATACAATCGGAAGCCAAGTGCTTGTTAGAAAGATTCGGAGGCTTTTATGGTGTACACTTACTGAACAGCTGAGGCTTATCACAAGTAATTTCCAGCGACACAACGCTTGTGTGTACACAAGTGCCGGTGCGCAGAAGCATCCAGTTCAGGATTGTAATGCGCGCGGCATAGCTCCGTCGTACTCGCGCAACCCATGTGTCTCCCGCCTGAAATTTCGAACGGTCGACTGAAAACGGTCGGGTCGGTCGGCAGCTACCATGATGACTCTGCTCGTGACTAAGACGGGATGAAGAGGGCAGTTTCGCTCATCTTTTTCCAATCGTTAACGTTCTCACCCCCACCATCTTGTATAATTTCTGTCAACCTCTGCTATACACATTTCGTAGACATCGGATGGTACTTCCAACAGATAAAGATGAGTTCCCGTAACTTCACCACGGTACCGCCCTTTGAAAGGGAGAACGTCCGTGTGTGGTCTAAATAACTTGTGAATTTGGAACCTCCTTGATTGATCTCTAAAGCGACGTGACGGCAATTCCATTTCTGTTGCCAGACACCTGGCGGTTCTATTTACTAACTGAGGTCCTAGTCTCCGTGCAGAACAATGCCCAAGTCACCCAGACTTTTCAGCGTTCGCGTTTACCGCCTGCCGACATAATTGGCTTAAATAATGCATGGATGTCACCTGTCTATAAATGCAAAGCCAGTCTGCCTTCAATCGGAAAGCGTACAAGGGAGGCTACGCGCTTGGCTCCTGGCCTTTCCTTGCTGACTCACTTAGTCTTCGGCCTGCTAGCGCCTCTGGGCCCCTGCTCGGCTGTGACGGCTTTCACATATTAGGGACCCTGATTCATTGGATCCGTAGGCTGCTGTCTTTACGTAGTTCTCCTTTAGGTGTTCCAGTGTCTGAGCAACGCGATGTCTATCGCCAGATAATTTGTACCAGATCTGCAAGAACCGAAGCGGCAAGAGGGATCGCACCGACCTTTCTCTTCGGCTCCAGCCTTGGCACCGGATCGGAAGGAAAGACTGGATACTCATTGATCACGGCTATTTTCTCACTCAGGTTGTGTTGAGCTATAATATATCTGAGGACCACTCAACCCGCCCCTGAATGGGAGAACTCGAATGTTAGTGTCCGTACTTAGCACAGGAGTAGTGGCCCAGATGTCCATACGCGACCTCCAGCGGGGCCTTTCCCGAAATGCCGTCCGATCTTCTCGCTGGTGACAACGCTAACTTGTAGACTCCGAGAGTAGGCTCCTGGCCTGATCCTGAGTCGACAAAACAGGTCGCTGATGTCGCAAATGTAATTCTCAAGGTTCGCCTACGCGTAACTTCCGTACGATAAAACGTTAAGCATCGCTAGTACTACAATAGAAGGATCACGGGCTTCAGGGATATTATTGGAGGCTCGTAAAACGCGCCCTCAAACATTCCGGGCTTTTTACTGCAGTTCTCGTACCGTTCAGCTTTTGGATGATGGAGATTCGGCGCGCGACCTGGCAGCGCAGATTTACGTAGGCAATGGAAGACATGTCTTTTCGCTTGTGATCGCCTTGACACACGATGAGCCTGCCCCCACGCGTCACAAAGATTTGGACGACGGACTAGGGGTGAATTGAAGCACTAGCTGATGTATAACTAGCAAGATCTCTAAAACCCTTAGTGCGTAAGCCTATTACCCTAGTCGCGCTCCTCAGGAGTCCGCCTGCCCCTGCGTGGAGAAGATCCCTTGGGTACCCTCCTCCCGCTACGTAATTGATTATTAACCGCGAACGGACGGAGTACCCTGTCACAGACCCTGAGGTCCCAAAGCCCGCAAATGCAGTGGGCACCTTGTTAGATAGCTATAATAGGTGCAGTGACACTTTTTGGTGGTGGGCCAGCTGTTCACTGAAACGCAACCCGACGTCTAACGCCTTCGAGAACCAGGGGCGAGGACGGCCCAAGCCTAAACAGCCGGCAGACAGAATTGGTTGCGCTGGATGGCGTCCTAGCATCTACTTGTTTCATCATACGGAAGCCGCGCGCAAACAAGTCGCATGAACATGATAAGCTAAATGTAGACGCCGACCACCTTCTCAGGGTTGAGCCCTCTGAGCAGTATGCCGTTACCTCAGTAGGAATGGGGCCAGCAGACACTTAACGCGCAAACACCACAACGGAGTTGACGGATAATGGGCATATCTTATACGCTCAAGAACCCAATACTGAGAGGGCGTCCGGTGAGATTGCCTGAGCGCACGGCCTTCATTTCATGCCCGCACGATAGCGTCGTGCAAGACCTCGCCGTGTTGGTCATGTAGCATTTTGCGATGTACCACCCAATCTGGCGGTTGAACTGTACTTAACAGGCGTTCCGCATTAAAGGTGTCGTCGCCAACCTTAATCGAAGCTTATAGGCTAATACGCACTGGCGGTGGTCCACGTAGCCAGGCATAAATCGAGACGCTTGTAGCTTACAAGGGTTAATTAAATCCACTGGCGAGACGGTATGAGTTACATGATGCATATTATGTCTAAAGGAAGGCCGACACACGGCGAAATCCGGTTCACTCACTGGGTTCCAGGGGCCGAATGACGATCGTATCAATGATAAGGGTGCAATTTACGGAACAAGTCCCGGAGTACAGTCGAGCCGGCAATCAGGTTTTCGTCAAGCGAACTGGATTGTTTATGTTAATACGGTGGATACTGTTCGGCGCGACCGCGTCCGTGAAGAATCGCTTGACTTTAACCGGCCGGCTATTTGCAGCGGAATATCCTACGCTGGCCGTACGGGTCTGTCTCATTTGTTCCAACAAGGGTTTGTGTTCACCCGGGCCGTCGATCTCTTAATTCGCAATATCGCCAAAGGCTATAGTTAAAGTAGGAACAGGAGAAGGCATCGCAAGCGCAGCATCTAACCTCTAGCACACCGATTACCCATTTGTACATAACCAACTACGAGGCAAAGTCTATGCCCCGGTTCAGCTAGTGTCCTAAGAGTCTGTAAAAATAGCCTGCATCTGGGTTACTTCCGCTATTTCACAGAAGGTGCTTTCTTGCGAGTTGTGATTCCGCGGTGGCATAAATACAGCCTAATACTATCCAGAAAGAATACGATGGATAGCCTAAGCGCCGAGCTCTACCAGTCGCACTCTCAGATGGTTGTCATGCGGATGTCGTCCTTCGGACCCACGAGATCGAAGATAGACGGTTCTCTAATCATCACGGGAATTCGTGACGTGGATAATTTAAGTGCAGTAAGACACCGGCACCTCACACTGAACGGATGTGCATAGGCATTCTCTACCGGATGCTGGGAAAATGTTCGAGTGATAAAGCCTGAAATAAACCTGAAAATAGCGTATCTTCGAGCAGGCGTACGTCTTGCAGTAGTATGTGGCTACTGATTGATCCGTATCCTAGGTGCCAATAACCCGGAGAATATGCACCCTCAGCCTAAGTACTTTAGTTGGTCAACTTGCAGGTCCCGTGGGCTAGTCGAGTGACCGGGCACCTTCCACCAAACGCGACCCCATCGGCGAGGGGAACCAGAATCGTAGACATACTGATACTTTAAAGTTATAATAGAGCGGCTCCAGGGAATCCCTAAGCGTGTGCGAACCGATACCGAGCGAACTCGTCATCAGGTCTCTTTCGACTGGACCTACGACTGTTGAATATACTCCTCACTTCCATGATTTGCGGCAATGTGCGACGAGGGCGCCTCAAAGTACTCAGGATTATCCTTAGTACTATAACACAGATAGCGCGGGTCGGGTGGCTAACGACGGGCACTCCCCAAGTCAATTCCTCGCAGACTCTTTCGCAGGGGAGACGGGGTCCCTTTGTACCCCGTCCCTGGCATTTGACCGTGCTCTCGAATCATTGCAGAGAAGTTCATGCATGGGCCTCGGTAGGATCAAAACGGGTAATACGGTTCGTTCCCACTCACAGTCCTATCAGGAAACGCAGTACATGGGCCATTTAGCTTACAGCACGTGCACAAATATCATACACTCCAGCGAGTTCTCTAGGGTAACCATCTGGAAAGCCATCAGTTAGAGCCCACGGGCTGAAATCGGGAGCTGGATGCATCTGAACGTTATGAAGAACCCGATCAATCACGATGACTTTAATTTTTATAGGATGAAGATCGGTTCTCATGAGTAGGTATGGCGGACTCTTGCATTAAAGTGGAACAAATCTGCAGTAACACTATAAAACTTCTGTGACGAATAGTGGGCTGCCGAATGTGGGGAAGTGCAGACGTATGAAGAGAGCTACGCCCAGAGGGGTAAAGCTGTAGTCCTCCTTGGGCCGAATGATTCCCTCCGCGAACTTAGAGCGGGCTGAGGGTCAATGCTGCTTTCCAGGAGAACTTGAGGTACAACTGATTAAAAATTGGGGGCTGCCAGGGGCCAGTCCTCCACTTTTCATCCGCTTCAAGGATATGTCCGAAGATACTCTCATGAATGCGGGCGCACGCGCCCCTTTGCGTCTATCGTAGAGTGACATCGGTGGGAGCCCGTCACCTAGAACAGTATCCTGGGGCGCGACGCTTTGACACTCTTGAGAGCCCTAATACGCCCCCTATGTGACACCAGGAATAGTTAACAGCGTTGTACTCGCCGACTAAAATGCCAGTTGGAAGCACTTGAAGAGTTTGAACATAATTCCTCATTCATATTTTGTATTTACCCACTTATCTGATCGTTTTCTTCAAGGGCATAAGATTAGCCCCGAATATGTCATGTGGGTAGTCTGCAACCCTAGTGCGTTTATTACTACGGTAATACCTAATTATATATCCATCACGGCGATCCAATTGCCAATCCTCACAATCGGCAAAGTAAACTAGTAGCCGTGCCAAAGAGTTACCTGAATGGCTCTGTGAACGTCATAGGGGGGGAAAAGGAGGTCCGTTTGGTGGTCTCAAAATGCGAGGTCGACAAGCGGCGCTAATAGCACTACCCAATGAAGCGGTTTGCACCCACACCAAATCCCTGATGATGTCCAAACATAGTTCGGGGCCACGTTTAAAACCACCTTACCTGGCGTGGACGCCGCCCCGAGGCGCGCTACAAGCGAATCTGGCCCACCTTACGGTGGTCCGAGGATTTATGCTACTCGGAGGTCGACTCTAGCCCGAATATGTGACGATAATCAGAAGGGTGGCAACAACGTATTCTTTCAGCCGTATGCAGTTTCAGCGGCTGGGACCGATGGATCAGCTTCAGCGCCGTTCACCCGAGTTTTTAAAATTTTTGTCCGTCGAAACCCTTCACCTGTTGGCCTCGGATGCTCTTGGCTAGGGGACACTCTATCGCCTCAGAACTACCAACTCCTTATAAAGATCCACGCACTTTCTCGCCATTACTAAACGGCTGCTCACCTTCCCATACCATCCGTACGACCGAAAGTCGAGAACACGGGTCACATTGTTCACCTCGCCAAAATGCGACGTCTCGTCCTGGGGGCGAAAGGTGTCCGCTCACGTCGTGCCCAACCGTTACGTGGATCGCAAGCTTTATTTACCTTCTCGCCTGATAACGTTGTTGTATATCCCTGTACCCTAAAAAAAATCCAAGTGCCTCGACAGCTACAAACATGTGGGCGTGATCACTAGGAAAATCGAAGTGGGTTCCAGTCCCAACAGGCAATCATGTGCCACGTATAATGACCACAGAGTCTGACATCCGGCCTCTGAATCTATACTGGGATACATTTCGGTAGTTATAGGGACTCCAAACGGCCTGCTAGGATTCGGGCGTTATTTAGTGAGATAGCGACGTCAATGGGCTTTTTGCCGACCGATCGGGCCCGATGTAATGAACATCTACGCTCGGCAGCGGGTCATACATCACACTCGAGTGTAGACCCGACAGACGAGACAATATTGCCGACATGTTGCCCGTCTACGGAGTGGCGCCTTCGATCGGAAATATAAGGAGCCGTATACAGGAGAAGGGCGAGACCAAACCCGTATGGCCTTCTTAAACGATCGTAGCGTCGTCCCAGACCTGAGAATGGAGAGGCGTGTGCCAGCATGCAGACGCCTCACTTGTCTGAAAGCCGCATTGCAGCCGGCGGGAGTAGGAACCATCCGCATGGTCTGCTGTGCTGTACGTAATACGTATTGATTGTGCTGTTAGTAGGTTAGCCTCTATACGTGTATAATGAGGAAGCGATTGAAAGTTACTCTTCTGGGGGCGAGATATTGGTATGTGCGTCCTACAAATTATGGCAGTGACGTTAACAACGGCCAGAGGTAAGCATCTTTGTACCCGGCCGTTACCCATTACCGAATCCCCATGGGCACGATGACATCTAGTTTTCGCGCTATAACCTAACAGGGCCCCCGGGTTTCGCAGGCTGGATCGCCTGTTACCAAGACTCACATGTTATGGTAGCGATCATACAGTCATAACGAATGGTCAGGGCCGTGTATCGTCTTCAAGCTCGAGTTTGCCAAATCTAAAACCGTAATCATTATAATACTCTTCGGCCCGTCGCGAATTTCGACTACATTCGGCTAATTCCTTTCGATCCCATTCCGTACGATTTATTTTAGGCGTGCGTTACGCAGCATCGATTTGAAGGGATAACTGGCCAAGATGAGTGACCGTAATATTTAGTACGCAGGGCAGCGACCCTGAGTCAATAGAGATGCGGGTTGACGTAGGTGCGGTAGCCGTCGCACTGCAGATCTTCATAGTTTGTGCTTTAATTCTATTGCCTGCTCCAAAAAGAACTGATCCTTCTGCTAGACGGACCGGTGAGAGAGGCTCGACTATCGTGCCAGACTATACTGCAATAGTGCGAACCCTGCCGGTCATACGACCTCACGATATACGGCGGAGAACAAGCGCTCCATTTACTTCCTGAATTACGACACTGGTTGAGATGCGTACAGACACCGTCT"))


def PatternMatching(Pattern, Genome):
    gen_len = len(Genome)
    pat_len = len(Pattern)
    ind = []
    for i in range(gen_len-pat_len):
        if Genome[i:i+pat_len] == Pattern:
            ind.append(str(i))
    return " ".join(ind)

def ReadInput(path):
    read_inp =[]
    with open(path,"r+") as f:
        for line in f:
            read_inp.append(line.strip())
    return read_inp        

def WriteOutput(output):
    with open("answer.txt","w+") as f: 
        f.write(output)


def LastSymbol(Pattern):
    return Pattern[-1]        

def Prefix(Pattern):
    return Pattern[:-1]

def SymbolToNumber(symbol):
    if symbol == "A":
        return 0    
    elif symbol == "C":
        return 1    
    elif symbol == "G":
        return 2    
    elif symbol == "T":
        return 3


def PatternToNumber(Pattern):
    if not Pattern:
        return 0
    last_symbol = LastSymbol(Pattern)
    prefix = Prefix(Pattern)
    return 4 * PatternToNumber(prefix) + SymbolToNumber(last_symbol)  

print(PatternToNumber(ReadInput("dataset_3010_2.txt")[0]))